name: Application Release Scan

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository name (org/repo format)'
        required: true
        type: string
      release_branch:
        description: 'Release branch to scan (e.g., R1-2025)'
        required: true
        type: string
      workflow_run_number:
        description: 'GitHub run number for display'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run without creating PRs'
        required: false
        type: boolean
        default: false
      pr_reviewers:
        description: 'Comma-separated list of reviewers (users or teams with org/ prefix)'
        required: false
        type: string
        default: ''
    outputs:
      pr_created:
        description: 'Whether a PR was created or updated'
        value: ${{ jobs.create-pr.outputs.pr_created }}
      pr_number:
        description: 'PR number if created or updated'
        value: ${{ jobs.create-pr.outputs.pr_number }}
      pr_url:
        description: 'PR URL if created or updated'
        value: ${{ jobs.create-pr.outputs.pr_url }}
      updated:
        description: 'Whether the application was updated'
        value: ${{ jobs.update-application.outputs.updated }}
      updated_modules:
        description: 'List of updated modules'
        value: ${{ jobs.update-application.outputs.updated_modules }}
      new_version:
        description: 'New version of the application'
        value: ${{ jobs.update-application.outputs.new_version }}
      updates_cnt:
        description: 'Number of updates'
        value: ${{ jobs.update-application.outputs.updates_cnt }}

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  APP_NAME: ${{ inputs.app_name }}
  STATE_FILE: "application-descriptor.json"
  GH_TOKEN: ${{ github.token }}

jobs:
  determine-source-branch:
    name: Determine Source Branch
    runs-on: ubuntu-latest
    outputs:
      source_branch: ${{ steps.determine-branch.outputs.source_branch }}
      update_branch_exists: ${{ steps.determine-branch.outputs.update_branch_exists }}
    steps:
      - name: Determine which branch to scan
        id: determine-branch
        env:
          REPO: ${{ inputs.repo }}
          RELEASE_BRANCH: ${{ inputs.release_branch }}
          UPDATE_BRANCH: "release-update/${{ inputs.release_branch }}"
        run: |
          set -eo pipefail
          
          echo "::notice::Checking if update branch exists: $UPDATE_BRANCH"
          
          if gh api "repos/$REPO/branches/$UPDATE_BRANCH" >/dev/null 2>&1; then
            echo "::notice::Update branch exists, will scan: $UPDATE_BRANCH"
            echo "source_branch=$UPDATE_BRANCH" >> "$GITHUB_OUTPUT"
            echo "update_branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::Update branch does not exist, will scan: $RELEASE_BRANCH"
            echo "source_branch=$RELEASE_BRANCH" >> "$GITHUB_OUTPUT"
            echo "update_branch_exists=false" >> "$GITHUB_OUTPUT"
          fi

  update-application:
    name: Check for Module Updates
    needs: determine-source-branch
    uses: ./.github/workflows/update-application.yml
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      branch: ${{ needs.determine-source-branch.outputs.source_branch }}
      workflow_run_number: ${{ inputs.workflow_run_number }}
      mode: 'release'
    secrets: inherit

  commit-changes:
    name: Commit and Push Changes
    needs: [determine-source-branch, update-application]
    if: needs.update-application.outputs.updated == 'true'
    uses: ./.github/workflows/commit-application-changes.yml
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      branch: "release-update/${{ inputs.release_branch }}"
      commit_message: |
        Update modules to ${{ needs.update-application.outputs.new_version }}.
        
        Updated modules:
        ${{ needs.update-application.outputs.updated_modules }}
      dry_run: ${{ inputs.dry_run }}
      use_github_app: false
      source_branch: ${{ needs.determine-source-branch.outputs.source_branch }}
    secrets: inherit

  create-pr:
    name: Create PR
    needs: [update-application, commit-changes]
    if: always() && needs.commit-changes.result == 'success' && !inputs.dry_run
    uses: ./.github/workflows/create-pr.yml
    with:
      repo: ${{ inputs.repo }}
      base_branch: ${{ inputs.release_branch }}
      head_branch: "release-update/${{ inputs.release_branch }}"
      pr_title: "Release: Update to ${{ needs.update-application.outputs.new_version }}"
      pr_body: |
        ## Automated Module Updates for Release

        **New Version:** ${{ needs.update-application.outputs.new_version }}
        **Total modules updated:** ${{ needs.update-application.outputs.updates_cnt }}

        ### Updated Modules:
        ```
        ${{ needs.update-application.outputs.updated_modules }}
        ```

        This PR was automatically generated by the release scan workflow.
      pr_labels: 'automated,release'
      pr_reviewers: ${{ inputs.pr_reviewers }}
    secrets: inherit


