name: Application Release Scan

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository name (org/repo format)'
        required: true
        type: string
      release_branch:
        description: 'Release branch to scan (e.g., R1-2025)'
        required: true
        type: string
      update_branch:
        description: 'Update branch name for this release branch'
        required: true
        type: string
      workflow_run_number:
        description: 'GitHub run number for display'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run without creating PRs'
        required: false
        type: boolean
        default: false
      pr_reviewers:
        description: 'Comma-separated list of reviewers (users or teams with org/ prefix)'
        required: false
        type: string
        default: ''
      pr_labels:
        description: 'Comma-separated list of labels to add to PR'
        required: false
        type: string
        default: ''
    outputs:
      pr_created:
        description: 'Whether a PR was created or updated'
        value: ${{ jobs.manage-pr.outputs.pr_created || jobs.manage-pr.outputs.pr_updated }}
      pr_number:
        description: 'PR number if created or updated'
        value: ${{ jobs.manage-pr.outputs.pr_number }}
      pr_url:
        description: 'PR URL if created or updated'
        value: ${{ jobs.manage-pr.outputs.pr_url }}
      successful_reviewers:
        description: 'Successfully added reviewers'
        value: ${{ jobs.manage-pr.outputs.successful_reviewers }}
      failed_reviewers:
        description: 'Failed to add reviewers'
        value: ${{ jobs.manage-pr.outputs.failed_reviewers }}
      updated:
        description: 'Whether the application was updated'
        value: ${{ jobs.update-application.outputs.updated }}
      updated_modules:
        description: 'List of updated modules'
        value: ${{ jobs.update-application.outputs.updated_modules }}
      new_version:
        description: 'New version of the application'
        value: ${{ jobs.update-application.outputs.new_version }}
      updates_cnt:
        description: 'Number of updates'
        value: ${{ jobs.update-application.outputs.updates_cnt }}
      workflow_status:
        description: 'Overall workflow status'
        value: ${{ jobs.determine-source-branch.result == 'failure' && 'failure' || (jobs.update-application.result == 'failure' && 'failure' || (jobs.commit-changes.result == 'failure' && 'failure' || (jobs.manage-pr.result == 'failure' && 'failure' || 'success'))) }}
      failure_reason:
        description: 'Reason for workflow failure if any'
        value: ${{ jobs.determine-source-branch.result == 'failure' && 'Failed to determine source branch' || (jobs.update-application.result == 'failure' && 'Failed to update application modules' || (jobs.update-application.result == 'skipped' && 'Update application job was skipped' || (jobs.commit-changes.result == 'failure' && 'Failed to commit changes to branch' || (jobs.manage-pr.result == 'failure' && 'Failed to manage pull request' || '')))) }}

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  APP_NAME: ${{ inputs.app_name }}
  STATE_FILE: "application-descriptor.json"
  GH_TOKEN: ${{ github.token }}

jobs:
  determine-source-branch:
    name: Determine Source Branch and PR Status
    runs-on: ubuntu-latest
    outputs:
      source_branch: ${{ steps.determine-branch.outputs.source_branch }}
      update_branch_exists: ${{ steps.determine-branch.outputs.update_branch_exists }}
      pr_exists: ${{ steps.check-pr.outputs.pr_exists }}
      pr_number: ${{ steps.check-pr.outputs.pr_number }}
      pr_url: ${{ steps.check-pr.outputs.pr_url }}
    steps:
      - name: Determine which branch to scan
        id: determine-branch
        env:
          REPO: ${{ inputs.repo }}
          RELEASE_BRANCH: ${{ inputs.release_branch }}
          UPDATE_BRANCH: ${{ inputs.update_branch }}
        run: |
          set -eo pipefail
          
          echo "::notice::Checking if update branch exists: $UPDATE_BRANCH"
          
          if gh api "repos/$REPO/branches/$UPDATE_BRANCH" >/dev/null 2>&1; then
            echo "::notice::Update branch exists, will scan: $UPDATE_BRANCH"
            echo "source_branch=$UPDATE_BRANCH" >> "$GITHUB_OUTPUT"
            echo "update_branch_exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::Update branch does not exist, will scan: $RELEASE_BRANCH"
            echo "source_branch=$RELEASE_BRANCH" >> "$GITHUB_OUTPUT"
            echo "update_branch_exists=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Check for existing PR
        id: check-pr
        if: steps.determine-branch.outputs.update_branch_exists == 'true'
        env:
          REPO: ${{ inputs.repo }}
          BASE_BRANCH: ${{ inputs.release_branch }}
          HEAD_BRANCH: ${{ inputs.update_branch }}
        run: |
          set -eo pipefail
          
          echo "::notice::Checking for existing PR from $HEAD_BRANCH to $BASE_BRANCH"
          
          pr_json=$(gh pr list \
            --repo "$REPO" \
            --base "$BASE_BRANCH" \
            --head "$HEAD_BRANCH" \
            --json number,url \
            --jq '.[0]' || echo '{}')
          
          if [ "$pr_json" != "{}" ] && [ -n "$pr_json" ] && [ "$(echo "$pr_json" | jq -r '.url // ""')" != "" ]; then
            pr_number=$(echo "$pr_json" | jq -r '.number // ""')
            pr_url=$(echo "$pr_json" | jq -r '.url // ""')
            echo "::notice::Found existing PR #$pr_number: $pr_url"
            echo "pr_exists=true" >> "$GITHUB_OUTPUT"
            echo "pr_number=$pr_number" >> "$GITHUB_OUTPUT"
            echo "pr_url=$pr_url" >> "$GITHUB_OUTPUT"
          else
            echo "::notice::No existing PR found"
            echo "pr_exists=false" >> "$GITHUB_OUTPUT"
            echo "pr_number=" >> "$GITHUB_OUTPUT"
            echo "pr_url=" >> "$GITHUB_OUTPUT"
          fi

  update-application:
    name: Check for Module Updates
    needs: determine-source-branch
    uses: ./.github/workflows/update-application.yml
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      branch: ${{ needs.determine-source-branch.outputs.source_branch }}
      workflow_run_number: ${{ inputs.workflow_run_number }}
      mode: 'release'
    secrets: inherit

  compare-applications:
    name: Compare Application Versions
    needs: [determine-source-branch, update-application]
    if: always() && needs.determine-source-branch.outputs.update_branch_exists == 'true'
    uses: ./.github/workflows/compare-applications.yml
    with:
      repo: ${{ inputs.repo }}
      base_branch: ${{ inputs.release_branch }}
      head_branch: ${{ needs.update-application.outputs.updated != 'true' && inputs.update_branch || '' }}
      artifact_name: ${{ needs.update-application.outputs.updated == 'true' && format('{0}-update-files', inputs.app_name) || '' }}
      state_file: 'application-descriptor.json'
    secrets: inherit

  commit-changes:
    name: Commit and Push Changes
    needs: [determine-source-branch, update-application]
    if: needs.update-application.outputs.updated == 'true'
    uses: ./.github/workflows/commit-application-changes.yml
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      branch: ${{ inputs.update_branch }}
      commit_message: |
        Update modules to ${{ needs.update-application.outputs.new_version }}.
        
        Updated modules:
        ${{ needs.update-application.outputs.updated_modules }}
      dry_run: ${{ inputs.dry_run }}
      use_github_app: false
      source_branch: ${{ needs.determine-source-branch.outputs.source_branch }}
    secrets: inherit

  manage-pr:
    name: Manage Pull Request
    needs: [determine-source-branch, update-application, compare-applications, commit-changes]
    if: success() && !inputs.dry_run && !cancelled()
    runs-on: ubuntu-latest
    outputs:
      pr_created: ${{ steps.create-pr.outputs.pr_created == 'true' }}
      pr_updated: ${{ steps.update-pr.outputs.pr_updated == 'true' }}
      pr_number: ${{ steps.create-pr.outputs.pr_number || steps.update-pr.outputs.pr_number || needs.determine-source-branch.outputs.pr_number || '' }}
      pr_url: ${{ steps.create-pr.outputs.pr_url || steps.update-pr.outputs.pr_url || needs.determine-source-branch.outputs.pr_url || '' }}
      successful_reviewers: ${{ steps.create-pr.outputs.successful_reviewers || steps.update-pr.outputs.successful_reviewers || '' }}
      failed_reviewers: ${{ steps.create-pr.outputs.failed_reviewers || steps.update-pr.outputs.failed_reviewers || '' }}
    steps:
      - name: Generate App Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.EUREKA_CI_APP_ID }}
          private-key: ${{ secrets.EUREKA_CI_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ inputs.app_name }}

      - name: Create PR if needed
        id: create-pr
        if: |
          needs.determine-source-branch.outputs.pr_exists != 'true' && 
          (needs.update-application.outputs.updated == 'true' || 
           needs.determine-source-branch.outputs.update_branch_exists == 'true')
        uses: folio-org/kitfox-github/.github/actions/create-pr@RANCHER-2323-test #TODO: Change to master when ready
        with:
          repo: ${{ inputs.repo }}
          base_branch: ${{ inputs.release_branch }}
          head_branch: ${{ inputs.update_branch }}
          pr_title: "Release: Update to ${{ needs.compare-applications.outputs.new_version || needs.update-application.outputs.new_version || 'No updates' }}"
          pr_body: |
            ## Automated Module Updates for Release

            **New Version:** ${{ needs.compare-applications.outputs.new_version || needs.update-application.outputs.new_version || 'No version change' }}
            **Total modules updated:** ${{ needs.compare-applications.outputs.updates_cnt || needs.update-application.outputs.updates_cnt || '0' }}

            ### Updated Modules:
            ```
            ${{ needs.compare-applications.outputs.updated_modules || needs.update-application.outputs.updated_modules || 'No modules updated' }}
            ```

            This PR was automatically generated by the release scan workflow.
          pr_labels: ${{ inputs.pr_labels }}
          pr_reviewers: ${{ inputs.pr_reviewers }}
          github_token: ${{ steps.app-token.outputs.token || github.token }}

      - name: Update existing PR if needed
        id: update-pr
        if: |
          needs.determine-source-branch.outputs.pr_exists == 'true' && 
          needs.update-application.outputs.updated == 'true'
        uses: folio-org/kitfox-github/.github/actions/update-pr@RANCHER-2323-test #TODO: Change to master when ready
        with:
          repo: ${{ inputs.repo }}
          pr_number: ${{ needs.determine-source-branch.outputs.pr_number }}
          pr_title: "Release: Update to ${{ needs.compare-applications.outputs.new_version || needs.update-application.outputs.new_version }}"
          pr_body: |
            ## Automated Module Updates for Release

            **New Version:** ${{ needs.compare-applications.outputs.new_version || needs.update-application.outputs.new_version }}
            **Total modules updated:** ${{ needs.compare-applications.outputs.updates_cnt || needs.update-application.outputs.updates_cnt }}

            ### Updated Modules:
            ```
            ${{ needs.compare-applications.outputs.updated_modules || needs.update-application.outputs.updated_modules }}
            ```

            This PR was automatically generated by the release scan workflow.
          pr_labels: ${{ inputs.pr_labels }}
          pr_reviewers: ${{ inputs.pr_reviewers }}
          github_token: ${{ steps.app-token.outputs.token || github.token }}


