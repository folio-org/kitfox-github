name: Application Update

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository name (org/repo format)'
        required: true
        type: string
      branch:
        description: 'Branch to update'
        required: false
        type: string
        default: 'snapshot'
      workflow_run_number:
        description: 'GitHub run number for display'
        required: true
        type: string
      descriptor_build_offset:
        description: 'Offset to apply to application artifact version'
        required: false
        type: string
        default: '100100000000000'
      rely_on_FAR:
        description: 'Whether to rely on FAR for application descriptor dependencies'
        required: false
        type: boolean
        default: false
      mode:
        description: 'Update mode (snapshot | release)'
        required: false
        type: string
        default: 'snapshot'
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false
      use_github_app:
        description: 'Use GitHub App for authentication'
        required: false
        type: boolean
        default: false
    outputs:
      app_name:
        description: 'Application name'
        value: ${{ inputs.app_name }}
      updated:
        description: 'Whether application was updated'
        value: ${{ jobs.update-application.outputs.updated }}
      previous_version:
        description: 'Previous application version'
        value: ${{ jobs.update-application.outputs.previous_version }}
      new_version:
        description: 'New application version if updated'
        value: ${{ jobs.update-application.outputs.new_version }}
      updated_cnt:
        description: 'Number of updated modules'
        value: ${{ jobs.update-application.outputs.updates_cnt }}
      updated_modules:
        description: 'List of updated modules'
        value: ${{ jobs.update-application.outputs.updated_modules }}
      failure_reason:
        description: 'Reason for failure'
        value: ${{ jobs.update-application.outputs.failure_reason || 
          jobs.verify-application.outputs.failure_reason || 
          jobs.commit-changes.outputs.failure_reason || 'unknown' }}
      commit_sha:
        description: 'Commit SHA'
        value: ${{ jobs.commit-changes.outputs.commit_sha }}
      app_descriptor_url:
        description: 'URL of generated application descriptor'
        value: ${{ format('{0}/applications/{1}?full=true', vars.FAR_URL, jobs.update-application.outputs.app_descriptor_file_name) }} # TODO: Change to production URL
      app_descriptor_file_name:
        description: 'Name of generated application descriptor file'
        value: ${{ jobs.update-application.outputs.app_descriptor_file_name }}

permissions:
  contents: write

env:
  STATE_FILE: "application-descriptor.json"
  PLATFORM_DESCRIPTOR: "platform-descriptor"
  APP_NAME: ${{ inputs.app_name }}
  FAR_API_URL: "https://far.ci.folio.org/applications"

jobs:
  update-application:
    name: Update Application
    uses: ./.github/workflows/update-application.yml
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      branch: ${{ inputs.branch }}
      workflow_run_number: ${{ inputs.workflow_run_number }}
      descriptor_build_offset: ${{ inputs.descriptor_build_offset }}
      mode: ${{ inputs.mode }}
    secrets: inherit

  verify-application:
    name: Verify Application
    needs: update-application
    if: needs.update-application.outputs.updated == 'true'
    uses: ./.github/workflows/verify-application.yml
    with:
      app_name: ${{ inputs.app_name }}
      app_descriptor_file: ${{ needs.update-application.outputs.app_descriptor_file }}
      app_descriptor_file_name: ${{ needs.update-application.outputs.app_descriptor_file_name }}
      rely_on_FAR: ${{ inputs.rely_on_FAR }}
      skip_upload: ${{ inputs.dry_run }}
    secrets: inherit

  commit-changes:
    name: Commit Changes
    needs: [update-application, verify-application]
    if: needs.update-application.outputs.updated == 'true'
    uses: ./.github/workflows/commit-application-changes.yml
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      branch: ${{ inputs.branch }}
      commit_message: |
        Update application state file to ${{ needs.update-application.outputs.new_version }}.
        
        Previous version: ${{ needs.update-application.outputs.previous_version }}
        Total modules updated: ${{ needs.update-application.outputs.updates_cnt }}
        Modules: ${{ needs.update-application.outputs.updated_modules }}
      dry_run: ${{ inputs.dry_run }}
      use_github_app: ${{ inputs.use_github_app }}
    secrets: inherit

  cleanup-on-failure:
    name: Cleanup on Failure
    runs-on: ubuntu-latest
    needs: [update-application, verify-application, commit-changes]
    if: failure() && inputs.dry_run != true && needs.update-application.outputs.app_descriptor_file_name != ''
    steps:
      - name: Delete Uploaded Application in Registry
        id: delete-uploaded-app-in-registry
        env:
          APP_DESCRIPTOR_FILE_NAME: "${{ needs.update-application.outputs.app_descriptor_file_name }}"
        run: |
          set -eo pipefail
          echo "::notice::Delete previously uploaded application $APP_DESCRIPTOR_FILE_NAME in registry"

          resp_file="$(mktemp)"

          http_code="$(curl -sS -o "$resp_file" -w "%{http_code}" -X DELETE \
            -H "Content-Type: application/json" \
            "$FAR_API_URL/$APP_DESCRIPTOR_FILE_NAME")"

          if ! [[ "$http_code" =~ ^2[0-9]{2}$ ]]; then
            echo "::error::Failed to delete application in registry (HTTP $http_code)"
            
            [[ -s "$resp_file" ]] && cat "$resp_file" >&2 || echo "(empty response body)" >&2
            
            exit 1
          fi

          echo "::notice::Application descriptor deleted in registry successfully"
          rm -f "$resp_file"



  upload_results:
    name: Upload Results
    runs-on: ubuntu-latest
    needs: [update-application, verify-application, commit-changes, cleanup-on-failure]
    if: always()
    steps:
      - name: Prepare Output Artifact
        id: prepare-artifact
        if: always()
        env:
          STATUS: >-
            ${{ 
                ((needs.commit-changes.result == 'failure' || needs.verify-application.result == 'failure' || needs.update-application.result == 'failure') && 'failed') ||
                'success'
            }}
          FAILURE_REASON: >-
            ${{ 
                needs.update-application.outputs.failure_reason || 
                needs.verify-application.outputs.failure_reason || 
                needs.commit-changes.outputs.failure_reason || 'unknown' 
            }}
          APP_DESCRIPTOR_URL: ${{ format('{0}/applications/{1}?full=true', vars.FAR_URL, needs.update-application.outputs.app_descriptor_file_name) }}
        run: |
          set -eo pipefail

          mkdir -p /tmp/results
          
          printf '%s' "${{ needs.update-application.outputs.updated_modules }}" > /tmp/updated_modules.txt
          printf '%s' "$FAILURE_REASON" > /tmp/failure_reason.txt

          jq -n \
          --arg application             "${{ inputs.app_name }}" \
          --arg status                  "$STATUS" \
          --arg previous_version        "${{ needs.update-application.outputs.previous_version }}" \
          --arg new_version             "${{ needs.update-application.outputs.new_version }}" \
          --rawfile updated_modules     /tmp/updated_modules.txt \
          --arg updated_cnt             "${{ needs.update-application.outputs.updates_cnt }}" \
          --argjson updated             "${{ needs.update-application.outputs.updated || 'false' }}" \
          --rawfile failure_reason      /tmp/failure_reason.txt \
          --arg commit_sha              "${{ needs.commit-changes.outputs.commit_sha }}" \
          --arg app_descriptor_file_name "${{ needs.update-application.outputs.app_descriptor_file_name }}" \
          --arg app_descriptor_url      "$APP_DESCRIPTOR_URL" \
          '{
              application: $application,
              status: $status,
              previous_version: $previous_version,
              new_version: $new_version,
              updated_modules: $updated_modules,
              updated_cnt: $updated_cnt,
              updated: $updated,
              failure_reason: $failure_reason,
              commit_sha: $commit_sha,
              app_descriptor_file_name: $app_descriptor_file_name,
              app_descriptor_url: $app_descriptor_url
            }' > "/tmp/results/$APP_NAME.json"
      
          cat "/tmp/results/$APP_NAME.json"

      - name: Upload Application Result
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: "result-${{ inputs.app_name }}"
          path: "/tmp/results/${{ inputs.app_name }}.json"
          retention-days: 1
