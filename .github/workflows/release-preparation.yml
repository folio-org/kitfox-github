name: Release preparation (reusable)

run-name: ${{ inputs.app_name }} release preparation

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository (org/repo format)'
        required: true
        type: string
      previous_release_branch:
        description: 'Previous release branch (e.g., R1-2024)'
        required: true
        type: string
      new_release_branch:
        description: 'New release branch (e.g., R2-2024)'
        required: true
        type: string
      use_snapshot_fallback:
        description: 'Use snapshot branch as fallback if previous release branch not found'
        required: false
        type: boolean
        default: false
      use_snapshot_version:
        description: 'Use snapshot version as a base version'
        required: false
        type: boolean
        default: false
      need_pr:
        description: 'Require PR for version updates on this branch'
        required: false
        type: boolean
        default: true
      prerelease_mode:
        description: 'PreRelease mode for version updates ("false", "true", or "only")'
        required: false
        type: string
        default: 'false'
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false
    outputs:
      preparation_result:
        description: 'Result of the preparation (success/failure/skipped)'
        value: ${{ jobs.prepare.result }}
      app_name:
        description: 'Application name'
        value: ${{ jobs.prepare.outputs.app_name }}
      app_version:
        description: 'Application version'
        value: ${{ jobs.prepare.outputs.app_version }}
      source_branch:
        description: 'Source branch used for release'
        value: ${{ jobs.prepare.outputs.source_branch }}
      commit_sha:
        description: 'Commit SHA of the release'
        value: ${{ jobs.prepare.outputs.commit_sha }}
      failure_reason:
        description: 'Specific failure reason if preparation failed'
        value: ${{ jobs.prepare.outputs.failure_reason }}
      notification_outcome:
        description: 'Outcome of the notification'
        value: ${{ jobs.notify.outputs.notification_outcome }}

permissions:
  contents: write

concurrency:
  group: release-preparation-${{ inputs.repo }}
  cancel-in-progress: false

jobs:
  prepare:
    name: Prepare Release
    uses: folio-org/kitfox-github/.github/workflows/release-preparation-flow.yml@master
    with:
      app_name: ${{ inputs.app_name }}
      repo: ${{ inputs.repo }}
      previous_release_branch: ${{ inputs.previous_release_branch }}
      new_release_branch: ${{ inputs.new_release_branch }}
      use_snapshot_fallback: ${{ inputs.use_snapshot_fallback }}
      use_snapshot_version: ${{ inputs.use_snapshot_version }}
      dry_run: ${{ inputs.dry_run }}
      need_pr: ${{ inputs.need_pr }}
      prerelease_mode: ${{ inputs.prerelease_mode }}
    secrets: inherit

  notify:
    name: Send Notifications
    needs: prepare
    if: always() && !cancelled() && !inputs.dry_run
    runs-on: ubuntu-latest
    outputs:
      team_notif_status: ${{ steps.notify-team.outcome }}
      general_notif_status: ${{ steps.notify-general.outcome }}
      notification_outcome: ${{ steps.notify-team.outcome || steps.notify-general.outcome }}
    env:
      WORKFLOW_RESULT: ${{ needs.prepare.result }}
      APP_NAME: ${{ inputs.app_name }}
      REPO: ${{ inputs.repo }}
      NEW_RELEASE: ${{ inputs.new_release_branch }}
      SOURCE_BRANCH: ${{ needs.prepare.outputs.source_branch }}
      APP_VERSION: ${{ needs.prepare.outputs.app_version }}
      COMMIT_SHA: ${{ needs.prepare.outputs.commit_sha }}
      TITLE_TEXT: "${{ inputs.app_name }} Release Preparation ${{ needs.prepare.result == 'success' && 'SUCCESS' || 'FAILED' }}"
      TITLE_BLOCK: |
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "*${{ inputs.app_name }} Release Preparation ${{ needs.prepare.result == 'success' && 'SUCCESS' || 'FAILED' }} <${{ github.server_url }}/${{ inputs.repo }}/actions/runs/${{ github.run_id }}|#${{ github.run_number }}>*"
          }
        }
      SUCCESS_ATTACHMENT: |
        {
          "color": "good",
          "fields": [
            {
              "title": "New Release",
              "value": "<${{ github.server_url }}/${{ inputs.repo }}/tree/${{ inputs.new_release_branch }}|${{ inputs.new_release_branch }}>",
              "short": true
            },
            {
              "title": "Source Branch",
              "value": "<${{ github.server_url }}/${{ inputs.repo }}/tree/${{ needs.prepare.outputs.source_branch }}|${{ needs.prepare.outputs.source_branch }}>",
              "short": true
            },
            {
              "title": "New Version",
              "value": "${{ needs.prepare.outputs.app_version }}",
              "short": true
            },
            {
              "title": "Commit",
              "value": "<${{ github.server_url }}/${{ inputs.repo }}/commit/${{ needs.prepare.outputs.commit_sha }}|${{ needs.prepare.outputs.commit_sha }}>",
              "short": true
            }
          ],
          "footer": "Eureka CI/CD"
        }
      FAILURE_ATTACHMENT: |
        {
          "color": "danger",
          "fields": [
            {
              "title": "New Release",
              "value": "<${{ github.server_url }}/${{ inputs.repo }}/tree/${{ inputs.new_release_branch }}|${{ inputs.new_release_branch }}>",
              "short": true
            },
            {
              "title": "Source Branch",
              "value": "<${{ github.server_url }}/${{ inputs.repo }}/tree/${{ needs.prepare.outputs.source_branch }}|${{ needs.prepare.outputs.source_branch }}>",
              "short": true
            },
            {
              "title": "Error",
              "value": "${{ needs.prepare.outputs.failure_reason || 'Check workflow logs for details' }}",
              "short": false
            }
          ],
          "footer": "Eureka CI/CD"
        }
    steps:
      - name: Send to Team Channel
        id: notify-team
        if: vars.SLACK_NOTIF_CHANNEL != ''
        continue-on-error: true
        env:
          CHANNEL: ${{ vars.SLACK_NOTIF_CHANNEL }}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: false
          payload: |
            {
              "channel": "${{ env.CHANNEL }}",
              "text": "${{ env.TITLE_TEXT }}",
              "blocks": [
                ${{ env.TITLE_BLOCK }}
              ],
              "attachments": [
                ${{ env.WORKFLOW_RESULT == 'success' && env.SUCCESS_ATTACHMENT || env.FAILURE_ATTACHMENT }}
              ]
            }

      - name: Send to General Channel
        id: notify-general
        if: vars.GENERAL_SLACK_NOTIF_CHANNEL != ''
        continue-on-error: true
        env:
          CHANNEL: ${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}
        uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.EUREKA_CI_SLACK_BOT_TOKEN }}
          errors: false
          payload: |
            {
              "channel": "${{ env.CHANNEL }}",
              "text": "${{ env.TITLE_TEXT }}",
              "blocks": [
                ${{ env.TITLE_BLOCK }}
              ],
              "attachments": [
                ${{ env.WORKFLOW_RESULT == 'success' && env.SUCCESS_ATTACHMENT || env.FAILURE_ATTACHMENT }}
              ]
            }

  summarize:
    name: Application Summary
    needs: [prepare, notify]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Generate Application Summary
        env:
          PREP_RESULT: ${{ needs.prepare.result }}
          APP_VERSION: ${{ needs.prepare.outputs.app_version }}
          SOURCE_BRANCH: ${{ needs.prepare.outputs.source_branch }}
          COMMIT_SHA: ${{ needs.prepare.outputs.commit_sha }}
          FAILURE_REASON: ${{ needs.prepare.outputs.failure_reason }}
          TEAM_NOTIF_STATUS: ${{ needs.notify.outputs.team_notif_status || 'skipped' }}
          TEAM_NOTIF_STATUS_ICON: >-
            ${{
              needs.notify.outputs.team_notif_status == 'success' && '‚úÖ'
              || needs.notify.outputs.team_notif_status == 'failure' && '‚ö†Ô∏è'
              || '‚ÑπÔ∏è'
            }}
          GENERAL_NOTIF_STATUS: ${{ needs.notify.outputs.general_notif_status || 'skipped' }}
          GENERAL_NOTIF_STATUS_ICON: >-
            ${{
              needs.notify.outputs.general_notif_status == 'success' && '‚úÖ'
              || needs.notify.outputs.general_notif_status == 'failure' && '‚ö†Ô∏è'
              || '‚ÑπÔ∏è'
            }}
        run: |
          {
            echo "### üéØ Application: \`${{ inputs.app_name }}\`"
            echo ""

            if [[ "$PREP_RESULT" == "failure" ]]; then
              echo "‚ùå **Preparation Result:** Failed"
              if [[ -n "$FAILURE_REASON" ]]; then
                echo "- **Error:** $FAILURE_REASON"
              else
                echo "- Check the preparation job logs for details"
              fi
              if [[ "${{ inputs.dry_run }}" == "true" ]]; then
                echo ""
                echo "_Note: This failure occurred during a dry run._"
              fi
            elif [[ "$PREP_RESULT" == "cancelled" ]]; then
              echo "‚ö†Ô∏è **Preparation Result:** Cancelled"
            elif [[ "${{ inputs.dry_run }}" == "true" && "$PREP_RESULT" == "success" ]]; then
              echo "#### üèÉ Dry Run Mode"
              echo "This was a dry run - no actual changes were made."
              echo "- Release branch was verified but not created"
              echo "- Template updates were simulated"
              echo ""
            elif [[ "$PREP_RESULT" == "success" ]]; then
              echo "‚úÖ **Preparation Result:** Release branch created successfully"
              echo "- **New Release:** [${{ inputs.new_release_branch }}](${{ github.server_url }}/${{ inputs.repo }}/tree/${{ inputs.new_release_branch }})"
              echo "- **Source Branch:** $SOURCE_BRANCH"
              echo "- **New Version:** $APP_VERSION"
              echo "- **Commit SHA:** [$COMMIT_SHA](${{ github.server_url }}/${{ inputs.repo }}/commit/$COMMIT_SHA)"
            else
              echo "‚è≠Ô∏è **Preparation Result:** Skipped"
            fi

            echo ""

            echo "### üì® Notification Status"
            echo ""

            if [[ "${{ inputs.dry_run }}" == "true" ]]; then
              echo "‚ÑπÔ∏è Notifications skipped (dry run mode)"
            else
              if [[ -n "${{ vars.SLACK_NOTIF_CHANNEL }}" ]]; then
                echo "$TEAM_NOTIF_STATUS_ICON **Team Channel** (\`${{ vars.SLACK_NOTIF_CHANNEL }}\`): $TEAM_NOTIF_STATUS"
              else
                echo "‚ÑπÔ∏è **Team Channel:** Not configured"
              fi

              if [[ -n "${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}" ]]; then
                echo "$GENERAL_NOTIF_STATUS_ICON **General Channel** (\`${{ vars.GENERAL_SLACK_NOTIF_CHANNEL }}\`): $GENERAL_NOTIF_STATUS"
              else
                echo "‚ÑπÔ∏è **General Channel:** Not configured"
              fi
            fi

            echo ""
          } >> $GITHUB_STEP_SUMMARY