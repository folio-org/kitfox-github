name: Get Release Branches

on:
  workflow_call:
    inputs:
      config_file:
        description: 'Path to release scan configuration file'
        required: false
        type: string
        default: '.github/release-scan-config.yml'
    outputs:
      branches:
        description: 'JSON array of branches to scan'
        value: ${{ jobs.get-branches.outputs.branches }}
      enabled:
        description: 'Whether scanning is enabled'
        value: ${{ jobs.get-branches.outputs.enabled }}
      branch_count:
        description: 'Number of branches to scan'
        value: ${{ jobs.get-branches.outputs.branch_count }}
      pr_reviewers:
        description: 'Comma-separated list of PR reviewers'
        value: ${{ jobs.get-branches.outputs.pr_reviewers }}

jobs:
  get-branches:
    name: Determine Branches
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.check.outputs.branches }}
      enabled: ${{ steps.determine.outputs.enabled }}
      branch_count: ${{ steps.check.outputs.branch_count }}
      pr_reviewers: ${{ steps.determine.outputs.pr_reviewers }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Determine Branches to Scan
        id: determine
        env:
          CONFIG_FILE: ${{ inputs.config_file }}
        run: |
          set -eo pipefail
          
          echo "::notice::Reading configuration from $CONFIG_FILE"
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::Configuration file not found: $CONFIG_FILE"
            ENABLED=false; BRANCHES=''; BRANCH_COUNT=0
          else
            raw_enabled=$(yq eval '.scan_config.enabled' "$CONFIG_FILE" 2>/dev/null | tr -d '\r' | tr 'A-Z' 'a-z')
            if [[ "$raw_enabled" == "true" || "$raw_enabled" == "false" ]]; then
              ENABLED="$raw_enabled"
            else
              ENABLED="false"
            fi
          
            BRANCHES=$(yq eval -o=json -I=0 '.release_branches // []' "$CONFIG_FILE")
            BRANCH_COUNT=$(yq -e '(.release_branches // []) | length' "$CONFIG_FILE")
            PR_REVIEWERS=$(yq eval -o=json -I=0 '.scan_config.pr_reviewers // []' "$CONFIG_FILE" | \
               jq -r 'if type == "array" then join(",") elif type == "string" then . else "" end')
          
            [ "$ENABLED" != "true" ] && echo "::warning::Release scanning is disabled in configuration"
            [ -z "$BRANCHES" ] && echo "::warning::No release branches configured for scanning"
            echo "::notice::Found $BRANCH_COUNT branch(es) to scan"
            echo "::notice::Branches: $BRANCHES"
            [ -n "$PR_REVIEWERS" ] && echo "::notice::PR Reviewers: $PR_REVIEWERS"
          fi
          
          echo "branches=$BRANCHES" >> "$GITHUB_OUTPUT"
          echo "enabled=$ENABLED" >> "$GITHUB_OUTPUT"
          echo "branch_count=$BRANCH_COUNT" >> "$GITHUB_OUTPUT"
          echo "pr_reviewers=${PR_REVIEWERS:-}" >> "$GITHUB_OUTPUT"

      - name: Check branches exist
        id: check
        env:
          ENABLED: ${{ steps.determine.outputs.enabled }}
          BRANCHES: ${{ steps.determine.outputs.branches }}
          BRANCH_COUNT: ${{ steps.determine.outputs.branch_count }}
        run: |
          set -eo pipefail
          
          if [ "$ENABLED" != "true" ]; then
            echo "branches=[]" >> "$GITHUB_OUTPUT"
            echo "branch_count=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          echo "::notice::Checking branches exist"
          
          mapfile -t branches < <(jq -r '.[]?' <<<"${BRANCHES:-'[]'}")
          
          filtered=()
          for b in "${branches[@]}"; do
            if git ls-remote --exit-code --heads origin "$b" >/dev/null 2>&1; then
              filtered+=("$b")
            else
              echo "::warning::Branch '$b' not found; skipping"
            fi
          done

          json_array=$(printf '%s\n' "${filtered[@]}" | jq -R . | jq -cs .)
          
          echo "::notice::Found ${#filtered[@]} existing branch(es) to scan"
          [ ${#filtered[@]} -gt 0 ] && echo "::notice::Branches: ${filtered[*]}"
          
          echo "branches=$json_array" >> "$GITHUB_OUTPUT"
          echo "branch_count=${#filtered[@]}" >> "$GITHUB_OUTPUT"