name: Commit Application Changes (Reusable)

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository name (org/repo format)'
        required: true
        type: string
      branch:
        description: 'Branch to update'
        required: false
        type: string
        default: 'snapshot'
      commit_message:
        description: 'Commit message (supports multiline)'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run without making changes'
        required: false
        type: boolean
        default: false
      use_github_app:
        description: 'Use GitHub App for authentication'
        required: false
        type: boolean
        default: false
      source_branch:
        description: 'Source branch to checkout from (if different from target branch)'
        required: false
        type: string
        default: ''

    outputs:
      commit_sha:
        description: 'Commit SHA'
        value: ${{ jobs.commit-changes.outputs.commit_sha }}
      failure_reason:
        description: 'Reason for failure'
        value: ${{ jobs.commit-changes.outputs.failure_reason }}

permissions:
  contents: write

env:
  APP_NAME: ${{ inputs.app_name }}

jobs:
  commit-changes:
    name: Commit Changes
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.commit-changes.outputs.commit_sha }}
      failure_reason: ${{ steps.commit-changes.outputs.failure_reason || 
        steps.push-changes.outputs.failure_reason || ''}}
    steps:
      - name: Generate App Token
        id: app-token
        if: inputs.use_github_app == true
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.EUREKA_CI_APP_ID }}
          private-key: ${{ secrets.EUREKA_CI_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ inputs.app_name }}

      - name: Checkout Application Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.source_branch || inputs.branch }}
          token: ${{ steps.app-token.outputs.token || github.token }}
          fetch-depth: 0

      - name: Configure Git
        env:
          USER_NAME: ${{ inputs.use_github_app && 'eureka-ci[bot]' || 'github-actions[bot]' }}
          USER_EMAIL: ${{ inputs.use_github_app && '223025417+eureka-ci[bot]@users.noreply.github.com' || '41898282+github-actions[bot]@users.noreply.github.com' }}
        run: |
          set -eo pipefail
          
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
          echo "::notice::Git configured for automated commits"

      - name: Switch to Target Branch
        id: switch-branch
        if: inputs.source_branch != ''
        env:
          SOURCE_BRANCH: ${{ inputs.source_branch }}
          TARGET_BRANCH: ${{ inputs.branch }}
        run: |
          set -eo pipefail

          echo "::notice::Switching to branch '$TARGET_BRANCH' (from source '$SOURCE_BRANCH')"

          git rev-parse --verify $TARGET_BRANCH >/dev/null 2>&1 || git switch -c $TARGET_BRANCH
          git switch $TARGET_BRANCH
          
          echo "::notice::Successfully switched to branch '$TARGET_BRANCH'"


      - name: Download Application Update Files
        uses: actions/download-artifact@v4
        with:
          name: "${{ env.APP_NAME }}-update-files"
          path: .

      - name: Commit Changes
        id: commit-changes
        env:
          COMMIT_MESSAGE: ${{ inputs.commit_message }}
        run: |
          set -eo pipefail

          echo "::group::Stage changes for commit"
          git status
          echo "::endgroup::"
          
          git add . 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "::error::No changes to commit"
            echo "failure_reason=No changes to commit" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          commit_msg_file=$(mktemp)
          echo "$COMMIT_MESSAGE" > "$commit_msg_file"
          
          git commit -F "$commit_msg_file"
          rm -f "$commit_msg_file"
          
          commit_sha=$(git rev-parse HEAD)
          
          echo "::notice::Successfully committed changes #$commit_sha"
          echo "commit_sha=$commit_sha" >> "$GITHUB_OUTPUT"

      - name: Push Changes
        id: push-changes
        if: inputs.dry_run == false
        env:
          BRANCH_NAME: ${{ inputs.branch }}
        run: |
          set -eo pipefail

          echo "::notice::Pushing changes to branch '$BRANCH_NAME'"
          exit 1
          if ! output=$(git push -u origin "$BRANCH_NAME" 2>&1); then
            echo "::error::Failed to push changes to '$BRANCH_NAME'"
            echo "::error::$output"
            echo "failure_reason=Failed to push changes" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          echo "::notice::Successfully pushed changes to '$BRANCH_NAME'"
          
          
