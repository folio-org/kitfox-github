name: Application Release PR Merge

# This workflow implements the "PR merge view" from the CI flow [release] diagrams
# It publishes the descriptor and tags the release when a PR is merged

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Application repository name (org/repo format)'
        required: true
        type: string
      release_branch:
        description: 'Release branch (e.g., R1-2025)'
        required: true
        type: string
      new_version:
        description: 'New version from the merged PR'
        required: true
        type: string
      workflow_run_number:
        description: 'GitHub run number for display'
        required: true
        type: string
    outputs:
      tag_created:
        description: 'Whether a release tag was created'
        value: ${{ jobs.tag-release.outputs.tag_created }}
      tag_name:
        description: 'Name of the created tag'
        value: ${{ jobs.tag-release.outputs.tag_name }}
      published_version:
        description: 'Published application version'
        value: ${{ inputs.new_version }}

permissions:
  contents: write
  packages: write

env:
  APP_NAME: ${{ inputs.app_name }}
  STATE_FILE: "application-descriptor.json"

jobs:
  publish-descriptor:
    name: Publish Application Descriptor
    uses: ./.github/workflows/verify-application.yml
    with:
      app_name: ${{ inputs.app_name }}
      app_descriptor_file: "${{ inputs.app_name }}-${{ inputs.new_version }}.json"
      app_descriptor_file_name: "${{ inputs.app_name }}-${{ inputs.new_version }}"
      rely_on_FAR: false
      dry_run: false  # Actually publish
      skip_upload: false  # Upload to registry
    secrets: inherit

  tag-release:
    name: Tag Release
    runs-on: ubuntu-latest
    needs: publish-descriptor
    if: needs.publish-descriptor.result == 'success'
    outputs:
      tag_created: ${{ steps.create-tag.outputs.tag_created }}
      tag_name: ${{ steps.create-tag.outputs.tag_name }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.release_branch }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Tag
        id: create-tag
        env:
          TAG_NAME: "v${{ inputs.new_version }}"
          NEW_VERSION: ${{ inputs.new_version }}
          RELEASE_BRANCH: ${{ inputs.release_branch }}
        run: |
          set -eo pipefail
          
          echo "::notice::Creating release tag $TAG_NAME"
          
          # Check if tag already exists
          if git ls-remote --tags origin | grep -q "refs/tags/$TAG_NAME$"; then
            echo "::warning::Tag $TAG_NAME already exists"
            echo "tag_created=false" >> "$GITHUB_OUTPUT"
            echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          
          # Create annotated tag
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git tag -a "$TAG_NAME" -m "Release $NEW_VERSION
          
          Application: ${{ inputs.app_name }}
          Release Branch: $RELEASE_BRANCH
          Version: $NEW_VERSION
          
          This release was automatically tagged by the release merge workflow."
          
          # Push tag
          git push origin "$TAG_NAME"
          
          echo "::notice::Successfully created tag $TAG_NAME"
          echo "tag_created=true" >> "$GITHUB_OUTPUT"
          echo "tag_name=$TAG_NAME" >> "$GITHUB_OUTPUT"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-descriptor, tag-release]
    if: needs.tag-release.outputs.tag_created == 'true'
    steps:
      - name: Create Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_NAME: ${{ needs.tag-release.outputs.tag_name }}
          NEW_VERSION: ${{ inputs.new_version }}
        run: |
          set -eo pipefail
          
          echo "::notice::Creating GitHub release for $TAG_NAME"
          
          # Create release
          gh release create "$TAG_NAME" \
            --repo "${{ inputs.repo }}" \
            --title "Release $NEW_VERSION" \
            --notes "## Release $NEW_VERSION
          
          **Application:** ${{ inputs.app_name }}
          **Branch:** ${{ inputs.release_branch }}
          **Version:** $NEW_VERSION
          
          ### Application Descriptor
          Published to registry as: \`${{ inputs.app_name }}-$NEW_VERSION.json\`
          
          This release was automatically created by the release merge workflow." \
            --target "${{ inputs.release_branch }}"
          
          echo "::notice::Successfully created GitHub release"

  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [publish-descriptor, tag-release, create-github-release]
    if: always()
    steps:
      - name: Display Summary
        run: |
          set -eo pipefail

          echo "::notice::${{ inputs.app_name }} Release Merge Summary"
          echo ""
          echo "Application: ${{ inputs.app_name }}"
          echo "Release Branch: ${{ inputs.release_branch }}"
          echo "Version: ${{ inputs.new_version }}"
          echo ""
          echo "Descriptor Published: ${{ needs.publish-descriptor.result == 'success' && 'Yes ✅' || 'No ❌' }}"
          echo "Tag Created: ${{ needs.tag-release.outputs.tag_created == 'true' && 'Yes ✅' || 'No ⚠️' }}"
          echo "Tag Name: ${{ needs.tag-release.outputs.tag_name || 'N/A' }}"
          echo "GitHub Release: ${{ needs.create-github-release.result == 'success' && 'Created ✅' || 'Not Created ⚠️' }}"