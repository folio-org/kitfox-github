name: Commit and Push Changes (Reusable)

on:
  workflow_call:
    inputs:
      repo:
        description: 'Target repository (org/repo format)'
        required: true
        type: string
      branch:
        description: 'Target branch for changes'
        required: false
        type: string
        default: 'main'
      commit_message:
        description: 'Commit message (supports multiline)'
        required: true
        type: string
      artifact_name:
        description: 'Name of artifact containing files to commit'
        required: true
        type: string
      dry_run:
        description: 'Perform dry run without pushing changes'
        required: false
        type: boolean
        default: false
      use_github_app:
        description: 'Use GitHub App for authentication'
        required: false
        type: boolean
        default: false
      source_branch:
        description: 'Source branch to checkout from (for branch creation)'
        required: false
        type: string
        default: ''
      deleted_files:
        description: 'List of files to delete from the branch (multiline string, one file per line)'
        required: false
        type: string
        default: ''

    outputs:
      commit_sha:
        description: 'SHA of the created commit'
        value: ${{ jobs.commit-and-push.outputs.commit_sha }}
      branch_created:
        description: 'Whether a new branch was created'
        value: ${{ jobs.commit-and-push.outputs.branch_created }}
      changes_made:
        description: 'Whether any changes were committed'
        value: ${{ jobs.commit-and-push.outputs.changes_made }}
      failure_reason:
        description: 'Reason for failure if any'
        value: ${{ jobs.commit-and-push.outputs.failure_reason }}

permissions:
  contents: write

jobs:
  commit-and-push:
    name: Commit and Push Changes
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.commit.outputs.commit_sha }}
      branch_created: ${{ steps.switch-branch.outputs.branch_created || 'false' }}
      changes_made: ${{ steps.commit.outputs.changes_made || 'false' }}
      failure_reason: ${{ steps.commit.outputs.failure_reason ||
        steps.push.outputs.failure_reason || ''}}
    steps:
      - name: Extract Owner and Repository Name
        id: extract-repo-parts
        env:
          REPO: ${{ inputs.repo }}
        run: |
          set -eo pipefail

          # Extract owner (part before /)
          owner="${REPO%%/*}"
          # Extract repository name (part after /)
          repo_name="${REPO##*/}"

          echo "owner=$owner" >> "$GITHUB_OUTPUT"
          echo "repo_name=$repo_name" >> "$GITHUB_OUTPUT"

          echo "::notice::Owner: $owner"
          echo "::notice::Repository: $repo_name"

      - name: Generate App Token
        id: app-token
        if: inputs.use_github_app == true
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.EUREKA_CI_APP_ID }}
          private-key: ${{ secrets.EUREKA_CI_APP_KEY }}
          owner: ${{ steps.extract-repo-parts.outputs.owner }}
          repositories: ${{ steps.extract-repo-parts.outputs.repo_name }}

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repo }}
          ref: ${{ inputs.source_branch || inputs.branch }}
          token: ${{ steps.app-token.outputs.token || github.token }}
          fetch-depth: 0

      - name: Configure Git
        env:
          USER_NAME: ${{ inputs.use_github_app && 'eureka-ci[bot]' || 'github-actions[bot]' }}
          USER_EMAIL: ${{ inputs.use_github_app && '223025417+eureka-ci[bot]@users.noreply.github.com' || '41898282+github-actions[bot]@users.noreply.github.com' }}
        run: |
          set -eo pipefail
          
          git config --global user.name "$USER_NAME"
          git config --global user.email "$USER_EMAIL"
          echo "::notice::Git configured for automated commits"

      - name: Switch to Target Branch
        id: switch-branch
        if: inputs.source_branch != ''
        env:
          SOURCE_BRANCH: ${{ inputs.source_branch }}
          TARGET_BRANCH: ${{ inputs.branch }}
        run: |
          set -eo pipefail

          echo "::notice::Switching to branch '$TARGET_BRANCH' (from source '$SOURCE_BRANCH')"

          branch_created="false"
          if ! git rev-parse --verify "$TARGET_BRANCH" >/dev/null 2>&1; then
            echo "::notice::Creating new branch '$TARGET_BRANCH'"
            git switch -c "$TARGET_BRANCH"
            branch_created="true"
          else
            echo "::notice::Switching to existing branch '$TARGET_BRANCH'"
            git switch "$TARGET_BRANCH"
          fi

          echo "branch_created=$branch_created" >> "$GITHUB_OUTPUT"
          echo "::notice::Successfully switched to branch '$TARGET_BRANCH'"

      - name: Download Artifact with Changes
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: .

      - name: Delete Specified Files
        if: inputs.deleted_files != ''
        env:
          FILES_TO_DELETE: ${{ inputs.deleted_files }}
        run: |
          set -eo pipefail

          echo "::notice::Deleting specified files"

          while IFS= read -r file; do
            # Skip empty lines and trim whitespace
            file=$(echo "$file" | xargs)
            if [ -z "$file" ]; then
              continue
            fi

            if [ -f "$file" ]; then
              echo "::notice::Deleting $file"
              rm "$file"
            else
              echo "::notice::File $file not found, skipping"
            fi
          done <<< "$FILES_TO_DELETE"

      - name: Commit Changes
        id: commit
        env:
          COMMIT_MESSAGE: ${{ inputs.commit_message }}
        run: |
          set -eo pipefail

          echo "::group::Review changes"
          git status
          echo "::endgroup::"

          git add . 2>/dev/null || true

          if git diff --cached --quiet; then
            echo "::warning::No changes to commit"
            echo "changes_made=false" >> "$GITHUB_OUTPUT"
            echo "failure_reason=No changes to commit" >> "$GITHUB_OUTPUT"
            exit 1
          fi

          commit_msg_file=$(mktemp)
          echo "$COMMIT_MESSAGE" > "$commit_msg_file"

          git commit -F "$commit_msg_file"
          rm -f "$commit_msg_file"

          commit_sha=$(git rev-parse HEAD)

          echo "::notice::Successfully committed changes: $commit_sha"
          echo "commit_sha=$commit_sha" >> "$GITHUB_OUTPUT"
          echo "changes_made=true" >> "$GITHUB_OUTPUT"

      - name: Push Changes
        id: push
        if: inputs.dry_run == false
        env:
          BRANCH_NAME: ${{ inputs.branch }}
        run: |
          set -eo pipefail

          echo "::notice::Pushing changes to branch '$BRANCH_NAME'"
          if ! output=$(git push -u origin "$BRANCH_NAME" 2>&1); then
            echo "::error::Failed to push changes to '$BRANCH_NAME'"
            echo "::error::$output"
            echo "failure_reason=Failed to push changes" >> "$GITHUB_OUTPUT"
            exit 1
          fi
          echo "::notice::Successfully pushed changes to '$BRANCH_NAME'"


