name: Create Pull Request (Reusable)

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Application name'
        required: true
        type: string
      repo:
        description: 'Repository (org/repo format)'
        required: true
        type: string
      base_branch:
        description: 'Base branch for PR'
        required: true
        type: string
      head_branch:
        description: 'Head branch for PR'
        required: true
        type: string
      pr_title:
        description: 'Pull request title'
        required: true
        type: string
      pr_body:
        description: 'Pull request body (supports multiline)'
        required: true
        type: string
      pr_labels:
        description: 'Comma-separated list of labels'
        required: false
        type: string
        default: ''
      pr_reviewers:
        description: 'Comma-separated list of reviewers (users or teams with org/ prefix)'
        required: false
        type: string
        default: ''
      use_github_app:
        description: 'Use GitHub App for authentication'
        required: false
        type: boolean
        default: false
    outputs:
      created:
        description: 'Whether a new PR was created'
        value: ${{ jobs.manage-pr.outputs.pr_created }}
      number:
        description: 'Pull request number'
        value: ${{ jobs.manage-pr.outputs.pr_number }}
      url:
        description: 'Pull request URL'
        value: ${{ jobs.manage-pr.outputs.pr_url }}

permissions:
  pull-requests: write
  contents: read
  issues: write

jobs:
  manage-pr:
    name: Manage Pull Request
    runs-on: ubuntu-latest
    outputs:
      pr_created: ${{ steps.check-existing-pr.outputs.existing_pr == '' && steps.create-pr.outputs.pr_number != '' }}
      pr_number: ${{ steps.check-existing-pr.outputs.existing_pr || steps.create-pr.outputs.pr_number || '' }}
      pr_url: ${{ steps.check-existing-pr.outputs.existing_pr_url || steps.create-pr.outputs.pr_url || '' }}
    steps:
      - name: Generate App Token
        id: app-token
        if: inputs.use_github_app == true
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.EUREKA_CI_APP_ID }}
          private-key: ${{ secrets.EUREKA_CI_APP_KEY }}
          owner: ${{ github.repository_owner }}
          repositories: ${{ inputs.app_name }}

      - name: Check existing PR
        id: check-existing-pr
        env:
          REPO: ${{ inputs.repo }}
          BASE_BRANCH: ${{ inputs.base_branch }}
          HEAD_BRANCH: ${{ inputs.head_branch }}
          PR_LABELS: ${{ inputs.pr_labels }}
          GH_TOKEN: ${{ steps.app-token.outputs.token || github.token }}
        run: |
          set -eo pipefail
          
          echo "::notice::Checking for existing PR from $HEAD_BRANCH to $BASE_BRANCH"

          label_args=""
          if [ -n "$PR_LABELS" ]; then
            IFS=',' read -ra LABELS <<< "$PR_LABELS"
            for label in "${LABELS[@]}"; do
              label_args="$label_args --label \"$(echo $label | xargs)\""
            done
          fi

          pr_cmd="gh pr list \
            --repo "$REPO" \
            --base "$BASE_BRANCH" \
            --head "$HEAD_BRANCH" \
            --json number,url \
            --jq '.[0]'"
          
          if [ -n "$label_args" ]; then
            pr_cmd="$pr_cmd $label_args || echo '{}'"
          fi
          
          echo "::notice::Checking for existing PR with command: $pr_cmd"
          
          pr_json=$(eval $pr_cmd || echo '{}')
          
          if [ "$pr_json" != "{}" ] && [ -n "$pr_json" ]; then
            existing_pr=$(echo "$pr_json" | jq -r '.number // ""')
            existing_pr_url=$(echo "$pr_json" | jq -r '.url // ""')
            echo "::notice::Found existing PR #$existing_pr: $existing_pr_url"
          else
            existing_pr=""
            existing_pr_url=""
            echo "::notice::No existing PR found"
          fi
          
          echo "existing_pr=$existing_pr" >> "$GITHUB_OUTPUT"
          echo "existing_pr_url=$existing_pr_url" >> "$GITHUB_OUTPUT"

      - name: Ensure Labels Exist
        id: ensure-labels
        if: steps.check-existing-pr.outputs.existing_pr == '' && inputs.pr_labels != ''
        env:
          REPO: ${{ inputs.repo }}
          PR_LABELS: ${{ inputs.pr_labels }}
          GH_TOKEN: ${{ steps.app-token.outputs.token || github.token }}
        run: |
          set -eo pipefail
          
          echo "::notice::Ensuring labels exist in repository"
          
          label_args=""
          IFS=',' read -ra LABELS <<< "$PR_LABELS"
          for label in "${LABELS[@]}"; do
            label=$(echo "$label" | xargs)

            if ! gh label list --repo "$REPO" --json name --jq '.[] | select(.name == "'"$label"'") | .name' | grep -q "^${label}$"; then
              echo "::notice::Creating label '$label' in repository"
          
              gh label create "$label" --repo "$REPO" --description "Automated label" --color "0366d6" || {
                echo "::warning::Failed to create label '$label' in repository"
              }
            else
              echo "::notice::Label '$label' already exists in repository"
            fi
            
            label_args="$label_args --label \"$label\""
          done
          
          echo "label_args=$label_args" >> "$GITHUB_OUTPUT"

      - name: Create Pull Request
        id: create-pr
        if: steps.check-existing-pr.outputs.existing_pr == ''
        env:
          REPO: ${{ inputs.repo }}
          BASE_BRANCH: ${{ inputs.base_branch }}
          HEAD_BRANCH: ${{ inputs.head_branch }}
          TITLE: ${{ inputs.pr_title }}
          BODY: ${{ inputs.pr_body }}
          LABEL_ARGS: ${{ steps.ensure-labels.outputs.label_args }}
          PR_REVIEWERS: ${{ inputs.pr_reviewers }}
          GH_TOKEN: ${{ steps.app-token.outputs.token || github.token }}
        run: |
          set -eo pipefail
          
          echo "::notice::Creating new PR from $HEAD_BRANCH to $BASE_BRANCH"
          
          pr_body_file=$(mktemp)
          echo "$BODY" > "$pr_body_file"

          pr_cmd="gh pr create \
            --repo \"$REPO\" \
            --base \"$BASE_BRANCH\" \
            --head \"$HEAD_BRANCH\" \
            --title \"$TITLE\" \
            --body-file \"$pr_body_file\""
          
          if [ -n "$LABEL_ARGS" ]; then
            pr_cmd="$pr_cmd $LABEL_ARGS"
          fi
          
          echo "::notice::Creating PR with labels"

          pr_url=$(eval "$pr_cmd")
            
          rm -f "$pr_body_file"
            
          pr_number=$(echo "$pr_url" | grep -oE '[0-9]+$')
            
          echo "pr_created=true" >> "$GITHUB_OUTPUT"
          echo "pr_number=$pr_number" >> "$GITHUB_OUTPUT"
          echo "pr_url=$pr_url" >> "$GITHUB_OUTPUT"
          
          echo "::notice::Successfully created PR #$pr_number: $pr_url"

      - name: Add Reviewers to PR
        if: steps.create-pr.outputs.pr_number != '' && inputs.pr_reviewers != ''
        env:
          REPO: ${{ inputs.repo }}
          PR_NUMBER: ${{ steps.create-pr.outputs.pr_number }}
          PR_REVIEWERS: ${{ inputs.pr_reviewers }}
          GH_TOKEN: ${{ steps.app-token.outputs.token || github.token }}
        run: |
          set -eo pipefail
          
          echo "::notice::Adding reviewers to PR #$PR_NUMBER"

          individual_reviewers=""
          team_reviewers=""
          
          IFS=',' read -ra REVIEWERS <<< "$PR_REVIEWERS"
          for reviewer in "${REVIEWERS[@]}"; do
            reviewer=$(echo "$reviewer" | xargs)  # Trim whitespace
            
            if [[ "$reviewer" == *"/"* ]]; then
              team_name="${reviewer#*/}"
              team_reviewers="${team_reviewers} -f team_reviewers[]=$team_name"
              echo "Adding team reviewer: $team_name"
            else
              individual_reviewers="${individual_reviewers} -f reviewers[]=$reviewer"
              echo "Adding individual reviewer: $reviewer"
            fi
          done
          
          if [ -n "$individual_reviewers$team_reviewers" ]; then
            echo "::notice::Calling API to add reviewers"
          
            resp_json="$(mktemp)"
            resp_err="$(mktemp)"
          
            set +e
            gh api "repos/$REPO/pulls/$PR_NUMBER/requested_reviewers" \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              $individual_reviewers \
              $team_reviewers \
              >"$resp_json" 2>"$resp_err"
          
            status=$?
            set -e
          
            if [ $status -ne 0 ]; then
              echo "::warning::GitHub API returned non-zero status when adding reviewers."
              echo "::group::API stderr"
              cat $resp_err" || true
              echo "::endgroup::"
            fi
          
            echo "::notice::Successfully added reviewers"
          
            accepted_users=$(jq -r '.requested_reviewers[]?.login | ascii_downcase' "$resp_json" | paste -sd',' -)
            accepted_teams=$(jq -r '.requested_teams[]?.slug | ascii_downcase' "$resp_json" | paste -sd',' -)
        
            echo "::notice::Accepted users: ${accepted_users:-<none>}"
            echo "::notice::Accepted teams: ${accepted_teams:-<none>}"
          fi