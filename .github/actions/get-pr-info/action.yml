name: 'Get Pull Request Information'
description: 'Fetches detailed information about a pull request including labels, branches, and SHA'
author: 'FOLIO Eureka CI'

inputs:
  repository:
    description: 'Target repository (owner/repo format). If not provided, uses the current repository context'
    required: false
  pr_number:
    description: 'Pull request number to fetch information for'
    required: true
  github_token:
    description: 'GitHub token for API access'
    required: true
    default: ${{ github.token }}

outputs:
  pr_exists:
    description: 'Whether the PR exists and is accessible'
    value: ${{ steps.pr-info.outputs.pr_exists }}
  current_head_sha:
    description: 'Current HEAD SHA of the pull request'
    value: ${{ steps.pr-info.outputs.current_head_sha }}
  head_ref:
    description: 'Head branch reference of the pull request'
    value: ${{ steps.pr-info.outputs.head_ref }}
  base_ref:
    description: 'Base branch reference of the pull request'
    value: ${{ steps.pr-info.outputs.base_ref }}
  labels:
    description: 'JSON array of label names'
    value: ${{ steps.pr-info.outputs.labels }}
  state:
    description: 'State of the pull request (open, closed)'
    value: ${{ steps.pr-info.outputs.state }}
  skip_reason:
    description: 'Reason for skipping if PR does not exist'
    value: ${{ steps.pr-info.outputs.skip_reason }}

runs:
  using: 'composite'
  steps:
    - name: Get Pull Request Information
      id: pr-info
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          const prNumber = parseInt('${{ inputs.pr_number }}', 10);
          const repository = '${{ inputs.repository }}' || context.repo.owner + '/' + context.repo.repo;
          const [owner, repo] = repository.split('/');

          if (!prNumber || prNumber <= 0) {
            console.log(`Invalid or missing PR number: ${{ inputs.pr_number }}`);
            core.setOutput('pr_exists', 'false');
            core.setOutput('skip_reason', `Invalid PR number: ${{ inputs.pr_number }}`);
            return;
          }

          console.log(`Fetching PR #${prNumber} from ${repository}`);

          try {
            const { data: pr } = await github.rest.pulls.get({
              owner: owner,
              repo: repo,
              pull_number: prNumber
            });

            const labels = pr.labels.map(l => l.name);

            console.log(`PR #${prNumber} Details:`);
            console.log(`  Title: ${pr.title}`);
            console.log(`  State: ${pr.state}`);
            console.log(`  Base: ${pr.base.ref}`);
            console.log(`  Head: ${pr.head.ref}`);
            console.log(`  Current SHA: ${pr.head.sha}`);
            console.log(`  Labels: ${labels.join(', ') || 'none'}`);

            core.setOutput('pr_exists', 'true');
            core.setOutput('current_head_sha', pr.head.sha);
            core.setOutput('head_ref', pr.head.ref);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('labels', JSON.stringify(labels));
            core.setOutput('state', pr.state);

          } catch (error) {
            console.log(`Failed to fetch PR #${prNumber}: ${error.message}`);
            core.setOutput('pr_exists', 'false');
            core.setOutput('skip_reason', `PR #${prNumber} not found or inaccessible`);
          }
