name: 'Publish Application Descriptor'
description: 'Publish application descriptor to FOLIO Artifact Registry (FAR)'
inputs:
  descriptor-path:
    description: 'Path to application descriptor file (mutually exclusive with descriptor-artifact-name)'
    required: false
  descriptor-artifact-name:
    description: 'Name of artifact containing the descriptor (mutually exclusive with descriptor-path)'
    required: false
  descriptor-file-name:
    description: 'File name within the artifact (required if descriptor-artifact-name is provided)'
    required: false
  far-url:
    description: 'FAR registry URL'
    required: true
outputs:
  publish-status:
    description: 'Success/failure status (success | failure)'
    value: ${{ steps.publish.outputs.status }}
  descriptor-url:
    description: 'URL of published descriptor'
    value: ${{ steps.publish.outputs.descriptor_url }}
  http-code:
    description: 'HTTP response code from publish request'
    value: ${{ steps.publish.outputs.http_code }}

runs:
  using: 'composite'
  steps:
    - name: Validate Inputs
      shell: bash
      run: |
        if [[ -z "${{ inputs.descriptor-path }}" && -z "${{ inputs.descriptor-artifact-name }}" ]]; then
          echo "::error::Either descriptor-path or descriptor-artifact-name must be provided"
          exit 1
        fi

        if [[ -n "${{ inputs.descriptor-path }}" && -n "${{ inputs.descriptor-artifact-name }}" ]]; then
          echo "::error::Only one of descriptor-path or descriptor-artifact-name should be provided"
          exit 1
        fi

        if [[ -n "${{ inputs.descriptor-artifact-name }}" && -z "${{ inputs.descriptor-file-name }}" ]]; then
          echo "::error::descriptor-file-name is required when descriptor-artifact-name is provided"
          exit 1
        fi

    - name: Generate Unique Directory
      id: gen-dir
      if: inputs.descriptor-artifact-name != ''
      shell: bash
      run: |
        unique_dir="/tmp/publish-descriptor-${RANDOM}-${RANDOM}"
        echo "unique_dir=$unique_dir" >> "$GITHUB_OUTPUT"

    - name: Download Descriptor Artifact
      if: inputs.descriptor-artifact-name != ''
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.descriptor-artifact-name }}
        path: ${{ steps.gen-dir.outputs.unique_dir }}

    - name: Publish Application Descriptor to FAR
      id: publish
      shell: bash
      env:
        DESCRIPTOR_PATH: ${{ inputs.descriptor-path || format('{0}/{1}', steps.gen-dir.outputs.unique_dir, inputs.descriptor-file-name) }}
        FAR_API_URL: "${{ inputs.far-url }}/applications"
      run: |
        set -eo pipefail
        echo "::notice::Publishing application descriptor to FAR"

        if [ ! -f "$DESCRIPTOR_PATH" ]; then
          echo "::error::Application descriptor not found: $DESCRIPTOR_PATH"
          echo "status=failure" >> "$GITHUB_OUTPUT"
          exit 1
        fi

        resp_file="$(mktemp)"

        http_code="$(curl -sS -o "$resp_file" -w "%{http_code}" -X POST \
          -H "Content-Type: application/json" \
          -d @"$DESCRIPTOR_PATH" \
          "$FAR_API_URL?check=false")"

        echo "http_code=$http_code" >> "$GITHUB_OUTPUT"

        if ! [[ "$http_code" =~ ^2[0-9]{2}$ ]]; then
          echo "::error::Failed to publish application descriptor to FAR (HTTP $http_code)"

          [[ -s "$resp_file" ]] && cat "$resp_file" >&2 || echo "(empty response body)" >&2

          echo "status=failure" >> "$GITHUB_OUTPUT"
          rm -f "$resp_file"
          exit 1
        fi

        descriptor_id=$(jq -r '.id' "$DESCRIPTOR_PATH" 2>/dev/null)
        descriptor_url="$FAR_API_URL/$descriptor_id?full=true"

        echo "::notice::Application descriptor published successfully to $descriptor_url"
        echo "status=success" >> "$GITHUB_OUTPUT"
        echo "descriptor_url=$descriptor_url" >> "$GITHUB_OUTPUT"

        rm -f "$resp_file"
