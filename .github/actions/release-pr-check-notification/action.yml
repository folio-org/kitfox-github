name: 'Release PR Check Slack Notification'
description: 'Send Slack notification for application release PR check'

inputs:
  app_name:
    description: 'Application name'
    required: true
  repo:
    description: 'Repository full name'
    required: true
  pr_number:
    description: 'Pull request number'
    required: true
  pr_title:
    description: 'Pull request title'
    required: true
  pr_author:
    description: 'Pull request author'
    required: true
  pr_url:
    description: 'Pull request URL'
    required: true
  target_branch:
    description: 'Target branch'
    required: true
  source_branch:
    description: 'Source branch'
    required: true
  validation_status:
    description: 'Validation status'
    required: true
  descriptor_generated:
    description: 'Whether descriptor was generated'
    required: false
    default: ''
  verification_passed:
    description: 'Whether verification passed'
    required: false
    default: ''
  error_message:
    description: 'Error message if failed'
    required: false
    default: ''
  workflow_result:
    description: 'Overall workflow result'
    required: true
  workflow_run_id:
    description: 'GitHub workflow run ID'
    required: true
  workflow_run_number:
    description: 'GitHub workflow run number'
    required: true
  slack_channel:
    description: 'Slack channel ID'
    required: true
  slack_bot_token:
    description: 'Slack bot token'
    required: true

outputs:
  notification_sent:
    description: 'Whether notification was sent'
    value: ${{ steps.send-notification.outputs.notification_sent }}
  notification_status:
    description: 'Status of notification sending'
    value: ${{ steps.determine-status.outputs.notification_status }}

runs:
  using: 'composite'
  steps:
    - name: Determine Notification Status
      id: determine-status
      shell: bash
      env:
        VALIDATION_STATUS: ${{ inputs.validation_status }}
        DESCRIPTOR_GENERATED: ${{ inputs.descriptor_generated }}
        VERIFICATION_PASSED: ${{ inputs.verification_passed }}
        WORKFLOW_RESULT: ${{ inputs.workflow_result }}
      run: |
        echo "::notice::Determining notification status"
        
        if [[ "$VALIDATION_STATUS" == "skipped" ]]; then
          echo "send_notification=false" >> "$GITHUB_OUTPUT"
          echo "notification_status=skipped" >> "$GITHUB_OUTPUT"
          echo "status_emoji=⏭️" >> "$GITHUB_OUTPUT"
          echo "status_text=Skipped" >> "$GITHUB_OUTPUT"
        elif [[ "$WORKFLOW_RESULT" == "success" ]]; then
          echo "send_notification=true" >> "$GITHUB_OUTPUT"
          echo "notification_status=success" >> "$GITHUB_OUTPUT"
          echo "status_emoji=✅" >> "$GITHUB_OUTPUT"
          echo "status_text=Passed" >> "$GITHUB_OUTPUT"
        elif [[ "$WORKFLOW_RESULT" == "failure" ]]; then
          echo "send_notification=true" >> "$GITHUB_OUTPUT"
          echo "notification_status=failure" >> "$GITHUB_OUTPUT"
          echo "status_emoji=❌" >> "$GITHUB_OUTPUT"
          echo "status_text=Failed" >> "$GITHUB_OUTPUT"
        else
          echo "send_notification=false" >> "$GITHUB_OUTPUT"
          echo "notification_status=unknown" >> "$GITHUB_OUTPUT"
          echo "status_emoji=⚠️" >> "$GITHUB_OUTPUT"
          echo "status_text=Unknown" >> "$GITHUB_OUTPUT"
        fi

    - name: Build Notification Message
      id: build-message
      if: steps.determine-status.outputs.send_notification == 'true'
      shell: bash
      env:
        APP_NAME: ${{ inputs.app_name }}
        REPO: ${{ inputs.repo }}
        PR_NUMBER: ${{ inputs.pr_number }}
        PR_TITLE: ${{ inputs.pr_title }}
        PR_AUTHOR: ${{ inputs.pr_author }}
        PR_URL: ${{ inputs.pr_url }}
        TARGET_BRANCH: ${{ inputs.target_branch }}
        SOURCE_BRANCH: ${{ inputs.source_branch }}
        STATUS_EMOJI: ${{ steps.determine-status.outputs.status_emoji }}
        STATUS_TEXT: ${{ steps.determine-status.outputs.status_text }}
        ERROR_MESSAGE: ${{ inputs.error_message }}
        WORKFLOW_URL: "${{ github.server_url }}/${{ inputs.repo }}/actions/runs/${{ inputs.workflow_run_id }}"
      run: |
        echo "::notice::Building Slack notification message"
        
        # Build the message
        {
          echo "message<<EOF"
          echo "text: 'Release PR Update Check $STATUS_EMOJI for $APP_NAME'"
          echo "blocks:"
          echo "  - type: header"
          echo "    text:"
          echo "      type: plain_text"
          echo "      text: 'Release PR Update Check $STATUS_TEXT $STATUS_EMOJI'"
          echo "      emoji: true"
          echo "  - type: section"
          echo "    fields:"
          echo "      - type: mrkdwn"
          echo "        text: '*Repository:*\n$REPO'"
          echo "      - type: mrkdwn"
          echo "        text: '*PR:*\n<$PR_URL|#$PR_NUMBER>'"
          echo "      - type: mrkdwn"
          echo "        text: '*Author:*\n$PR_AUTHOR'"
          echo "      - type: mrkdwn"
          echo "        text: '*Target Branch:*\n$TARGET_BRANCH'"
          echo "  - type: section"
          echo "    text:"
          echo "      type: mrkdwn"
          echo "      text: '*Title:* $PR_TITLE'"
          
          if [[ -n "$ERROR_MESSAGE" ]]; then
            echo "  - type: section"
            echo "    text:"
            echo "      type: mrkdwn"
            echo "      text: '*Error:* $ERROR_MESSAGE'"
          fi
          
          echo "  - type: context"
          echo "    elements:"
          echo "      - type: mrkdwn"
          echo "        text: '<$WORKFLOW_URL|View Workflow Run>'"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Send Slack Notification
      id: send-notification
      if: steps.determine-status.outputs.send_notification == 'true'
      uses: slackapi/slack-github-action@v1.27.0
      with:
        channel-id: ${{ inputs.slack_channel }}
        payload: ${{ steps.build-message.outputs.message }}
      env:
        SLACK_BOT_TOKEN: ${{ inputs.slack_bot_token }}